{
   "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
   "contentVersion": "1.0.0.0",
   "parameters": {
   		"adminUsername": {
   			"type": "string",
   			"metadata": {
   				"description": "Username for admin account on Octopus and TeamCity VMs"
   			}
   		},
   		"adminPassword": {
   			"type": "securestring",
   			"metadata": {
   				"description": "Password for admin account on Octopus and TeamCity VMs"
   			}
   		},
   		"resourceGroupVersion": {
   			"type": "string",
   			"metadata": {
   				"description": "Unique 'version' we give to each deployment of this resource group. Used for unique naming purposes"
   			}
   		},
      "enableNonSslPort": {
        "type": "bool",
        "metadata": {
          "description": "A boolean value that indicates whether to allow access via non-SSL ports."
        }
      }
    },
   "variables": {
   		"namingInfix": "[toLower(substring(concat(parameters('resourceGroupVersion'), uniqueString(resourceGroup().id)), 0, 9))]",
   		"bastionLongNamingInfix": "[toLower(substring(concat(parameters('resourceGroupVersion'), uniqueString(resourceGroup().id)), 0, 31))]",
      "loadbalancerLongNamingInfix": "[toLower(substring(concat(parameters('resourceGroupVersion'), uniqueString(resourceGroup().id)), 0, 29))]",
   		"computeApiVersion": "2015-06-15",
   		"storageApiVersion": "2015-06-15",
   		"networkApiVersion": "2015-06-15",
   		"windowsOSVersion": "2012-R2-Datacenter",
   		"vmSize": "Standard_A1",
   		"storageAccountType": "Standard_LRS",
   		"virtualNetworkName": "virtualNetwork1",
   		"subnetName": "infraSubnet",
   		"vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
   		"subnetRef": "[concat(variables('vnetID'), '/subnets/', variables('subnetName'))]",
   		"addressPrefix": "10.0.0.0/16",
   		"subnetPrefix": "10.0.0.0/24",
      "gatewaySubnetName": "WebSubnet",
      "gatewaySubnetPrefix": "10.0.1.0/24",
      "gatewaySubnetRef": "[concat(variables('vnetID'), '/subnets/', variables('gatewaySubnetName'))]",
   		"bastionPublicIPAddressName": "[concat(variables('namingInfix'), 'bpip')]",
   		"bastionPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses', variables('bastionPublicIPAddressName'))]",
      "webLoadbalancerPublicIPAddressName": "[concat(variables('namingInfix'), 'lbpip')]",
      "webLoadbalancerPublicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses', variables('webLoadbalancerPublicIPAddressName'))]",
      "webLoadbalancerName": "[concat(variables('namingInfix'), 'gatewaylb')]",
      "webLoadbalancerID": "[resourceId('Microsoft.Network/loadBalancers', variables('webLoadbalancerName'))]",
      "frontEndIPConfigID": "[concat(variables('webLoadbalancerID'), '/frontendIPConfigurations/LoadBalancerFrontEnd')]",
      "webLoadbalancerProbeID": "[concat(variables('webLoadbalancerID'),'/probes/tcpProbe')]",
      "webLoadbalancerBEpool": "BEAddressPool",
      "webLoadbalancerBEpoolID": "[concat(variables('webLoadbalancerID'),'/backendAddressPools/', variables('webLoadbalancerBEpool'))]",
      "infraNSGName": "infraNSG",
   		"octopusServerName": "OctopusDeploy",
   		"octopusSAName": "[concat(variables('namingInfix'), 'odsa')]",
      "octopusNicName": "[concat(variables('octopusServerName'), 'nic')]",
      "octopusIPConfigName": "[concat(variables('octopusServerName'), 'ipconfig')]",
   		"teamCityServerName": "TeamCity",
   		"teamCitySAName": "[concat(variables('namingInfix'), 'tcsa')]",
      "teamCityNicName": "[concat(variables('teamCityServerName'), 'nic')]",
      "teamCityIPConfigName": "[concat(variables('teamCityServerName'), 'ipconfig')]",
   		"bastionServerName": "Bastion",
   		"bastionSAName": "[concat(variables('namingInfix'), 'bastionsa')]",
   		"bastionNicName": "[concat(variables('bastionServerName'), 'nic')]",
      "bastionIPConfigName": "[concat(variables('bastionServerName'), 'ipconfig')]",
      "octopusTCSqlServerName": "ODTCSqlServer",
      "octopusTCSqlServerSAName": "[concat(variables('namingInfix'), 'odtcsqlsa')]",
      "octopusTCSqlServerNicName": "[concat(variables('octopusTCSqlServerName'), 'nic')]",
      "octopusTCSqlServerIPConfigName": "[concat(variables('octopusTCSqlServerName'), 'ipconfig')]",
      "redisCacheName": "[concat('RedisSessionStore', variables('namingInfix'))]",
      "redisSAName": "[concat(variables('namingInfix'), 'redissa')]",
      "redisApiVersion": "2015-08-01",
      "redisDiagnositicsApiVersion": "2015-07-01",
   		"osType": {
  			"publisher": "MicrosoftWindowsServer",
  			"offer": "WindowsServer",
  			"sku": "[variables('windowsOSVersion')]",
  			"version": "latest"
    	},
      "sqlOsType": {
        "publisher": "MicrosoftSQLServer",
        "offer": "SQL2014-WS2012R2",
        "sku": "Standard",
        "version": "latest"
      },
		  "imageReference": "[variables('osType')]",
      "sqlServerImageReference": "[variables('sqlOsType')]",
		  "storageAccountContainerName": "vhds",
   },
   "resources": [
   	{
   		"type": "Microsoft.Network/virtualNetworks",
   		"name": "[variables('virtualNetworkName')]",
   		"location": "[resourceGroup().location]",
   		"apiVersion": "[variables('networkApiVersion')]",
   		"properties": {
   			"addressSpace": {
   				"addressPrefixes": [
   					"[variables('addressPrefix')]"
   				]
   			},
   			"subnets": [
   			 {
   			 	"name": "[variables('subnetName')]",
   			 	"properties": {
   			 		"addressPrefix": "[variables('subnetPrefix')]"
   			 	}
   			 },
         {
          "name":"[variables('gatewaySubnetName')]",
          "properties": {
            "addressPrefix": "[variables('gatewaySubnetPrefix')]"
          },
         },
   			],
   		}
   	},
   	{
   		"type": "Microsoft.Network/publicIPAddresses",
   		"name": "[variables('bastionPublicIPAddressName')]",
   		"location": "[resourceGroup().location]",
   		"apiVersion": "[variables('networkApiVersion')]",
   		"properties": {
   			"publicIPAllocationMethod": "Dynamic",
   			"dnsSettings": {
   				"domainNameLabel": "[variables('bastionLongNamingInfix')]"
   			}
   		}
   	},
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('webLoadbalancerPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[toLower(variables('webLoadbalancerName'))]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('infraNSGName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-rdp",
            "properties": {
              "description": "Allow RDP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "default-allow-sqltcp",
            "properties": {
              "description": "Allow SQL TCP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "1433",
              "sourceAddressPrefix": "[variables('subnetPrefix')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          },
        ]
      }
    },
   	{
   		"type": "Microsoft.Network/networkInterfaces",
   		"name": "[variables('octopusNicName')]",
   		"location": "[resourceGroup().location]",
   		"apiVersion": "[variables('networkApiVersion')]",
   		"dependsOn": [
   			"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('infraNSGName'))]"
   		],
   		"properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('infraNSGName'))]"
        },
   			"ipConfigurations": [
   			 {
   			 	"name": "[variables('octopusIPConfigName')]",
   			 	"properties": {
   			 		"privateIPAllocationMethod": "Dynamic",
   			 		"subnet": {
   			 			"id": "[variables('subnetRef')]"
   			 		}
   			 	}
   			 }
   			]
   		},
   	},
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('teamCityNicName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('infraNSGName'))]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('infraNSGName'))]"
        },
        "ipConfigurations": [
         {
          "name": "[variables('teamCityIPConfigName')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "subnet": {
              "id": "[variables('subnetRef')]"
            }
          }
         }
        ]
      },
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('bastionNicName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('bastionpublicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "ipConfigurations": [
         {
          "name": "[variables('bastionIPConfigName')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "publicIPAddress": {
              "id": "[variables('bastionPublicIPAddressID')]"
            },
            "subnet": {
              "id": "[variables('subnetRef')]"
            }
          }
         }
        ]
      },
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('octopusTCSqlServerNicName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('infraNSGName'))]"
        },
        "ipConfigurations": [
         {
          "name": "[variables('octopusTCSqlServerIPConfigName')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "subnet": {
              "id": "[variables('subnetRef')]"
            }
          }
         }
        ]
      },
    },
   	{
   		"type": "Microsoft.Storage/storageAccounts",
   		"name": "[variables('octopusSAName')]",
   		"apiVersion": "[variables('storageApiVersion')]",
   		"location": "[resourceGroup().location]",
   		"properties": {
   			"accountType": "[variables('storageAccountType')]"
   		}
   	},
   	{
   		"type": "Microsoft.Storage/storageAccounts",
   		"name": "[variables('teamCitySAName')]",
   		"apiVersion": "[variables('storageApiVersion')]",
   		"location": "[resourceGroup().location]",
   		"properties": {
   			"accountType": "[variables('storageAccountType')]"
   		}
   	},
   	{
   		"type": "Microsoft.Storage/storageAccounts",
   		"name": "[variables('bastionSAName')]",
   		"apiVersion": "[variables('storageApiVersion')]",
   		"location": "[resourceGroup().location]",
   		"properties": {
   			"accountType": "[variables('storageAccountType')]"
   		}
   	},
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('octopusTCSqlServerSAName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('redisSAName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('webLoadbalancerName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "tags": {
        "displayName": "Web Loadbalancer"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('webLoadbalancerPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('webLoadbalancerPublicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('webLoadbalancerBEpool')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPools": {
                "id": "[variables('webLoadbalancerBEpoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFlowingIP": "false",
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('webLoadbalancerProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
      },
    },
   	{
   		"type": "Microsoft.Compute/virtualMachines",
   		"name": "[variables('octopusServerName')]",
   		"location": "[resourceGroup().location]",
   		"apiVersion": "[variables('computeApiVersion')]",
   		"dependsOn": [
   			"[concat('Microsoft.Storage/storageAccounts/', variables('octopusSAName'))]"
   		],
   		"properties": {
   			"hardwareProfile": {
   				"vmSize": "[variables('vmSize')]"
   			},
   			"networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('octopusNicName'))]"
            },
          ]
   			},
   			"osProfile": {
   				"computerName": "[variables('octopusServerName')]",
   				"adminUsername": "[parameters('adminUsername')]",
   				"adminPassword": "[parameters('adminPassword')]",
   			},
   			"storageProfile": {
   				"imageReference": "[variables('imageReference')]",
   			  "osDisk": {
            "name": "[concat(variables('octopusServerName'), 'osdisk')]",
   				  "vhd": {
              "uri": "[concat('http://', variables('octopusSAName'), '.blob.core.windows.net/', variables('storageAccountContainerName'), '/', 'osdisk', '.vhd')]"
              },
   				  "caching": "ReadWrite",
   				  "createOption": "FromImage"
          },
        },
   		},
   	},
   	{
   		"type": "Microsoft.Compute/virtualMachines",
   		"name": "[variables('teamCityServerName')]",
   		"location": "[resourceGroup().location]",
   		"apiVersion": "[variables('computeApiVersion')]",
   		"dependsOn": [
   			"[concat('Microsoft.Storage/storageAccounts/', variables('teamCitySAName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('teamCityNicName'))]"
   		],
   		"properties": {
   			"hardwareProfile": {
   				"vmSize": "[variables('vmSize')]"
   			},
   			"networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('teamCityNicName'))]"
            }
          ]
   			},
   			"osProfile": {
   				"computerName": "[variables('teamCityServerName')]",
   				"adminUsername": "[parameters('adminUsername')]",
   				"adminPassword": "[parameters('adminPassword')]",
   			},
   			"storageProfile": {
   				"imageReference": "[variables('imageReference')]",
   			  "osDisk": {
            "name": "[concat(variables('teamCityServerName'), 'osdisk')]",
   				  "vhd": {
              "uri": "[concat('http://', variables('teamCitySAName'), '.blob.core.windows.net/', variables('storageAccountContainerName'), '/', 'osdisk', '.vhd')]"
              },
   				  "caching": "ReadWrite",
   				  "createOption": "FromImage"
   			  },
   		  },
      }
   	},
   	{
   		"type": "Microsoft.Compute/virtualMachines",
   		"name": "[variables('bastionServerName')]",
   		"location": "[resourceGroup().location]",
   		"apiVersion": "[variables('computeApiVersion')]",
   		"dependsOn": [
   			"[concat('Microsoft.Storage/storageAccounts/', variables('bastionSAName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('bastionNicName'))]"
   		],
   		"properties": {
   			"hardwareProfile": {
   				"vmSize": "[variables('vmSize')]"
   			},
   			"networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('bastionNicName'))]"
            }
          ]
        },
   			"osProfile": {
   				"computerName": "[variables('bastionServerName')]",
   				"adminUsername": "[parameters('adminUsername')]",
   				"adminPassword": "[parameters('adminPassword')]",
   			},
   			"storageProfile": {
   				"imageReference": "[variables('imageReference')]",
     			"osDisk": {
     				"name": "[concat(variables('bastionServerName'), 'osdisk')]",
     				"vhd": {
     					"uri": "[concat('http://', variables('bastionSAName'), '.blob.core.windows.net/', variables('storageAccountContainerName'), '/', 'osdisk', '.vhd')]"
     				},
     				"caching": "ReadWrite",
     				"createOption": "FromImage"
   			  },
        }
      }
   	},
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('octopusTCSqlServerName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('octopusTCSqlServerSAName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('octopusTCSqlServerNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('octopusTCSqlServerNicName'))]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('octopusTCSqlServerName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
        },
        "storageProfile": {
          "imageReference": "[variables('sqlServerImageReference')]",
          "osDisk": {
            "name": "[concat(variables('octopusTCSqlServerName'), 'osdisk')]",
            "vhd": {
              "uri": "[concat('http://', variables('octopusTCSqlServerSAName'), '.blob.core.windows.net/', variables('storageAccountContainerName'), '/', 'osdisk', '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
        }
      }
    },
    {
      "type": "Microsoft.Cache/Redis",
      "name": "[variables('redisCacheName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('redisApiVersion')]",
      "properties": {
        "enableNonSslPort": "[parameters('enableNonSslPort')]",
        "sku": {
          "capacity": 2,
          "family": "C",
          "name": "Basic"
        }
      },
      "resources": [
        {
          "type": "Microsoft.Cache/redis/providers/diagnosticsettings",
          "name": "[concat(variables('redisCacheName'), '/Microsoft.Insights/service')]",
          "location": "[resourceGroup().location]",
          "apiVersion": "[variables('redisDiagnositicsApiVersion')]",
          "dependsOn": [
            "[concat('Microsoft.Cache/Redis/', variables('redisCacheName'))]"
          ],
          "properties": {
            "status": "OFF",
            "storageAccountName": "[variables('redisSAName')]"
          },
        },
      ]
    },
   ],
   "outputs": {  }
}